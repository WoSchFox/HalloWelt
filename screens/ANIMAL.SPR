*       *********************************************************
*       *                                                         
*       * 09/24/2003            ANIMAL.SPR               08:27:59 
*       *                                                         
*       *********************************************************
*       *                                                         
*       * jassing@ix.netcom.com                                   
*       *                                                         
*       * Copyright (c) 2003 Company Name                         
*       * Address                                                 
*       * City,     Zip                                           
*       *                                                         
*       * Description:                                            
*       * This program was automatically generated by GENSCRN.    
*       *                                                         
*       *********************************************************

PARAMETERS animalnum, personno, wintitle

*       *********************************************************
*       *                                                         
*       *          ANIMAL/Windows Setup Code - SECTION 1          
*       *                                                         
*       *********************************************************
*

#REGION 1
PRIVATE i, once
** If animalNo is nonzero, we should go and load that animal.
** Everything will be passed by reference, so each one will
** be capable of bashing the appropriate groups of bits.
** By passing parameters around, it shouldn't be too terribly
** difficult to activate the chunks of code for updating the
** relationship databases.


#define SEARCHBUTTON 1
#define HISTORYBUTTON 2
#define MEDICALBUTTON 3
#define FEESBUTTON 4
#define CLEARBUTTON 6
#define MULTIPLEBUTTON 5
#define DONEBUTTON 7
#define CANCELBUTTON 8
#define HELPBUTTON 9


#REGION 0
REGIONAL m.currarea, m.talkstat, m.compstat

IF SET("TALK") = "ON"
	SET TALK OFF
	m.talkstat = "ON"
ELSE
	m.talkstat = "OFF"
ENDIF
m.compstat = SET("COMPATIBLE")
SET COMPATIBLE FOXPLUS

m.rborder = SET("READBORDER")
SET READBORDER ON

*       *********************************************************
*       *                                                         
*       *               Windows Window definitions                
*       *                                                         
*       *********************************************************
*

IF NOT WEXIST("animal") ;
	OR UPPER(WTITLE("ANIMAL")) == "ANIMAL.PJX" ;
	OR UPPER(WTITLE("ANIMAL")) == "ANIMAL.SCX" ;
	OR UPPER(WTITLE("ANIMAL")) == "ANIMAL.MNX" ;
	OR UPPER(WTITLE("ANIMAL")) == "ANIMAL.PRG" ;
	OR UPPER(WTITLE("ANIMAL")) == "ANIMAL.FRX" ;
	OR UPPER(WTITLE("ANIMAL")) == "ANIMAL.QPR"
	DEFINE WINDOW animal ;
		AT  0.667, 7.375  ;
		SIZE 30.188,130.000 ;
		TITLE winTitle ;
		FONT "Arial", 10 ;
		STYLE "B" ;
		FLOAT ;
		NOCLOSE ;
		NOMINIMIZE ;
		SYSTEM ;
		COLOR RGB(,,,192,192,192)
	MOVE WINDOW animal CENTER
ENDIF


*       *********************************************************
*       *                                                         
*       *          ANIMAL/Windows Setup Code - SECTION 2          
*       *                                                         
*       *********************************************************
*

#REGION 1

*
* Inserted file PROGRAMS\ANMLSTUP.PRG not found!
*

saz = Proper(iniedit(inifile,"Kennel","ZeroStart",'no')) == "Yes"

dogid= iniedit(inifile,"Receiving","DogIdHold","-1")
dognid=iniedit(inifile,"Receiving","DogNoIdHold","-1")
catid= iniedit(inifile,"Receiving","CatIdHold","-1")
catnid=iniedit(inifile,"Receiving","CatNoIdHold","-1")
othid= iniedit(inifile,"Receiving","OtherIdHold","-1")
othnid=iniedit(inifile,"Receiving","OtherNoIdHold","-1")
=wcheck()


*       *********************************************************
*       *                                                         
*       *              ANIMAL/Windows Screen Layout               
*       *                                                         
*       *********************************************************
*

#REGION 1
IF WVISIBLE("animal")
	ACTIVATE WINDOW animal SAME
ELSE
	ACTIVATE WINDOW animal NOSHOW
ENDIF
@ 19.188,74.167 SAY iif(m.evil, iif(hadid,ScrnBmps.talontag3,ScrnBmps.talons3), iif(hadid, ScrnBmps.tag3, ScrnBmps.null)) ;
	SIZE 3.688,11.333 ;
	CENTER ;
	ISOMETRIC ;
	STYLE ""
@ 21.500,88.833 SAY "Animal Notes" ;
	FONT "Arial", 10 ;
	STYLE "BT"
@ 0.188,1.333 SAY "Processor" ;
	FONT "Arial", 10 ;
	STYLE "BT"
@ 0.188,35.167 SAY "Date" ;
	FONT "Arial", 10 ;
	STYLE "BT"
@ 0.188,53.333 SAY "Time" ;
	FONT "Arial", 10 ;
	STYLE "BT"
@ 2.500,1.167 SAY "Animal Code " ;
	FONT "Arial", 10 ;
	STYLE "BT"
@ 5.813,1.000 SAY "Incoming Status" ;
	FONT "Arial", 10 ;
	STYLE "BT"
@ 4.063,1.167 SAY "Status Group" ;
	FONT "Arial", 10 ;
	STYLE "BT"
@ 7.500,1.000 SAY "Entry Point" ;
	FONT "Arial", 10 ;
	STYLE "BT"
@ 13.688,1.333 SAY "Location City" ;
	FONT "Arial", 10 ;
	STYLE "BT"
@ 14.938,1.333 SAY "Location Info" ;
	FONT "Arial", 10 ;
	STYLE "BT"
@ 2.625,47.167 SAY "Species" ;
	FONT "Arial", 10 ;
	STYLE "BT"
@ 4.250,47.333 SAY "Primary Breed" ;
	FONT "Arial", 10 ;
	STYLE "BT"
@ 2.625,88.833 SAY "Primary Color" ;
	FONT "Arial", 10 ;
	STYLE "BT"
@ 4.250,88.833 SAY "Secondary Color" ;
	FONT "Arial", 10 ;
	STYLE "BT"
@ 5.875,88.833 SAY "Color Pattern" ;
	FONT "Arial", 10 ;
	STYLE "BT"
@ 7.500,67.000 SAY "Altered" ;
	FONT "Arial", 10 ;
	STYLE "BT"
@ 7.500,47.333 SAY "Sex" ;
	FONT "Arial", 10 ;
	STYLE "BT"
@ 9.125,47.500 SAY "Age" ;
	FONT "Arial", 10 ;
	STYLE "BT"
@ 10.500,47.500 SAY "Age Group" ;
	FONT "Arial", 10 ;
	STYLE "BT"
@ 7.313,88.833 SAY "Coat" ;
	FONT "Arial", 10 ;
	STYLE "BT"
@ 9.000,89.000 SAY "Tail" ;
	FONT "Arial", 10 ;
	STYLE "BT"
@ 10.750,88.833 SAY "Left Eye" ;
	FONT "Arial", 10 ;
	STYLE "BT"
@ 12.250,88.833 SAY "Right Eye" ;
	FONT "Arial", 10 ;
	STYLE "BT"
@ 14.000,88.833 SAY "Left Ear" ;
	FONT "Arial", 10 ;
	STYLE "BT"
@ 15.625,88.833 SAY "Right Ear" ;
	FONT "Arial", 10 ;
	STYLE "BT"
@ 17.125,88.833 SAY "Features" ;
	FONT "Arial", 10 ;
	STYLE "BT"
@ 5.875,47.333 SAY "Secondary Breed" ;
	FONT "Arial", 10 ;
	STYLE "BT"
@ 10.688,1.000 SAY "Available Date" ;
	FONT "Arial", 10 ;
	STYLE "BT"
@ 18.625,1.333 SAY "Current" + CHR(13) + ;
		"Location" ;
	SIZE 2.000,10.833, 0.000 ;
	FONT "Arial", 10 ;
	STYLE "BT"
@ 12.063,1.167 SAY "Jurisdiction" ;
	FONT "Arial", 10 ;
	STYLE "BT"
@ 9.125,30.667 SAY "Time" ;
	FONT "Arial", 10 ;
	STYLE "BT"
@ 22.313,1.333 SAY "People Related to this Animal" ;
	FONT "Arial", 10 ;
	STYLE "BT"
@ 0.125,71.000 SAY "Name" ;
	FONT "Arial", 10 ;
	STYLE "BT"
@ 20.750,1.167 SAY "Disposition" ;
	FONT "Arial", 10 ;
	STYLE "BT"
@ 12.188,47.500 SAY "Weight" ;
	FONT "Arial", 10 ;
	STYLE "BT"
@ 13.875,47.500 SAY "Size Group" ;
	FONT "Arial", 10 ;
	STYLE "BT"
@ 15.625,47.333 SAY "Collar Type" ;
	FONT "Arial", 10 ;
	STYLE "BT" ;
	COLOR RGB(0,0,0,,,,)
@ 17.250,47.333 SAY "Collar Color" ;
	FONT "Arial", 10 ;
	STYLE "BT"
@ 3.813,18.667 GET m.statusgrou ;
	PICTURE "@^" ;
	FROM m.statGrpList ;
	SIZE 1.500,20.333 ;
	RANGE SG_GROUP ;
	DEFAULT 1 ;
	FONT "Arial", 10 ;
	STYLE "B" ;
	VALID pStatusGroup("Valid")
@ 5.500,18.667 GET m.status ;
	PICTURE "@^" ;
	FROM statuslist ;
	SIZE 1.500,20.333 ;
	DEFAULT 1 ;
	FONT "Arial", 10 ;
	STYLE "B" ;
	VALID pStatus("Valid") ;
	DISABLE
@ 7.250,18.667 GET m.entryPoint ;
	PICTURE "@^ Field;Shelter;Abandoned at Shelter;After Hours Receiving;Unspecified" ;
	SIZE 1.500,20.333 ;
	DEFAULT "Unspecified" ;
	FONT "Arial", 10 ;
	STYLE "B"
@ 9.125,17.667 GET m.foundDate ;
	SIZE 1.000,11.500 ;
	DEFAULT {  /  /  } ;
	FONT "Arial", 10 ;
	PICTURE "@K" ;
	VALID _1200i5a54()
@ 9.125,36.833 GET m.fndTimeText ;
	SIZE 1.000,8.167 ;
	DEFAULT " " ;
	FONT "Arial", 10 ;
	PICTURE "@K" ;
	VALID pFndTimeText("Valid")
@ 10.625,17.667 GET m.available ;
	SIZE 1.000,11.500 ;
	DEFAULT {  /  /  } ;
	FONT "Arial", 10 ;
	PICTURE "@K" ;
	VALID IIF(EMPTY(m.available),.T.,Val_EndD(m.FoundDate, @m.Available)) ;
	ERROR gcErrMsg
@ 11.938,17.333 GET m.jurisdict ;
	PICTURE "@^" ;
	FROM jurisList ;
	SIZE 1.500,26.333 ;
	DEFAULT 1 ;
	FONT "Arial", 10 ;
	STYLE "B" ;
	DISABLE
@ 13.813,17.667 GET m.city ;
	SIZE 1.000,25.500 ;
	DEFAULT " " ;
	FONT "Arial", 10 ;
	PICTURE "@K" ;
	VALID pCity ("Valid")
@ 15.313,17.667 EDIT m.locateInfo ;
	SIZE 3.000,26.000,0.000 ;
	DEFAULT " " ;
	FONT "Arial", 10 ;
	SCROLL
@ 18.750,17.167 GET m.kennel ;
	PICTURE "@^" ;
	FROM kennelList ;
	SIZE 1.500,19.333 ;
	RANGE 1 ;
	DEFAULT 1 ;
	FONT "Arial", 10 ;
	STYLE "B" ;
	VALID pKennel("Valid")
@ 18.938,36.833 GET m.kennelNo ;
	SPINNER 1.000, iif(saz,0,1), iif(saz, m.curKennelMax-1,m.curKennelMax) ;
	PICTURE "@K" ;
	SIZE 1.125, 4.167 ;
	DEFAULT 0.000 ;
	RANGE iif( saz, 0, 1 ), iif(saz, m.curKennelMax-1,m.curKennelMax) ;
	DISABLE ;
	FONT "Arial", 10 ;
	STYLE "B"
@ 20.438,17.167 GET m.dispositio ;
	PICTURE "@^" ;
	FROM disposeList ;
	SIZE 1.500,26.667 ;
	DEFAULT 1 ;
	FONT "Arial", 10 ;
	STYLE "B" ;
	DISABLE
@ 23.438,1.333 GET m.personPick ;
 	PICTURE "@&N" ;
	FROM ownerList ;
	RANGE OWNER_TXT ;
	SIZE 4.500,41.833 ;
	DEFAULT 1 ;
	FONT "Arial", 10 ;
	VALID goPerson(.F.)
@ 0.250,77.833 GET m.AnimalName ;
	SIZE 0.875,50.000 ;
	DEFAULT " " ;
	FONT "Arial", 10 ;
	PICTURE "@K" ;
	VALID _1200i5a5d()
@ 2.438,66.167 GET m.species ;
	PICTURE "@^" ;
	FROM speciesList ;
	SIZE 1.500,21.167 ;
	DEFAULT 1 ;
	FONT "Arial", 10 ;
	STYLE "B" ;
	WHEN pSpecies("When") ;
	VALID pSpecies("Valid")
@ 4.063,66.167 GET m.Breed1 ;
	PICTURE "@^" ;
	FROM breedList ;
	SIZE 1.500,21.167 ;
	DEFAULT 1 ;
	FONT "Arial", 10 ;
	STYLE "B" ;
	VALID _1200i5a5f() ;
	DISABLE
@ 5.688,66.167 GET m.Breed2 ;
	PICTURE "@^" ;
	FROM breed2List ;
	SIZE 1.500,21.167 ;
	DEFAULT 1 ;
	FONT "Arial", 10 ;
	STYLE "B" ;
	DISABLE
@ 7.313,52.500 GET m.sex ;
	PICTURE "@^ Unspecified;Male;Female;Unknown" ;
	SIZE 1.500,11.500 ;
	DEFAULT "Unspecified" ;
	FONT "Arial", 10 ;
	STYLE "B"
@ 7.313,76.000 GET m.altered ;
	PICTURE "@^ Unspecified;Yes;No;Unknown" ;
	SIZE 1.500,11.333 ;
	DEFAULT "Unspecified" ;
	FONT "Arial", 10 ;
	STYLE "B"
@ 9.125,52.833 GET m.birthdate ;
	SIZE 1.000,12.167 ;
	DEFAULT " " ;
	FONT "Arial", 10 ;
	PICTURE "@K" ;
	WHEN pBirthdate("When") ;
	VALID pBirthdateI("Valid")
@ 9.125,66.500 GET m.agetext ;
	SIZE 1.000,20.500 ;
	DEFAULT 0 ;
	FONT "Arial", 10 ;
	PICTURE "@K" ;
	WHEN pAgeText("When") ;
	VALID pAgeText("Valid") ;
	COLOR ,RGB(0,0,0,,,,)
@ 10.438,66.167 GET m.ageGroup ;
	PICTURE "@^" ;
	FROM ageList ;
	SIZE 1.500,21.167 ;
	RANGE ageColumn ;
	DEFAULT 1 ;
	FONT "Arial", 10 ;
	STYLE "B"
@ 12.125,66.500 GET m.weightext ;
	SIZE 1.000,20.500 ;
	DEFAULT " " ;
	FONT "Arial", 10 ;
	PICTURE "@K" ;
	VALID pWeightext("Valid")
@ 13.625,66.167 GET m.weightGrp ;
	PICTURE "@^" ;
	FROM wghtList ;
	SIZE 1.500,21.167 ;
	DEFAULT 1 ;
	FONT "Arial", 10 ;
	STYLE "B"
@ 15.313,66.167 GET m.CollarTyp1 ;
	PICTURE "@^" ;
	FROM coltypList ;
	SIZE 1.500,21.167 ;
	DEFAULT 1 ;
	FONT "Arial", 10 ;
	STYLE "B" ;
	VALID pCollarType("Valid")	 ;
	DISABLE
@ 17.063,66.167 GET m.CollarClr1 ;
	PICTURE "@^" ;
	FROM colclrList ;
	SIZE 1.500,21.167 ;
	DEFAULT 1 ;
	FONT "Arial", 10 ;
	STYLE "B" ;
	VALID pCollarcolor("Valid")	 ;
	DISABLE
@ 18.688,47.000 GET llMultCollar ;
	PICTURE "@*C Multiple Collars" ;
	SIZE 1.063,20.833 ;
	DEFAULT 0 ;
	FONT "Arial", 10 ;
	STYLE "BT" ;
	VALID pMultCollar("Valid") ;
	DISABLE
@ 19.938,47.000 GET m.Adoptable ;
	PICTURE "@*C Approved for Adoption" ;
	SIZE 1.063,28.167 ;
	DEFAULT 0 ;
	FONT "Arial", 10 ;
	STYLE "BT" ;
	VALID MakeAdoptable()
@ 21.188,47.000 GET m.evil ;
	PICTURE "@*C Handle with Care" ;
	SIZE 1.063,22.667 ;
	DEFAULT 0 ;
	FONT "Arial", 10 ;
	STYLE "BT" ;
	VALID updateIcons()
@ 22.313,47.000 GET m.declawed ;
	PICTURE "@*C Declawed" ;
	SIZE 1.063,14.833 ;
	DEFAULT 0 ;
	FONT "Arial", 10 ;
	STYLE "BT"
@ 22.313,62.833 GET m.special ;
	PICTURE "@*C Special" ;
	SIZE 1.063,12.333 ;
	DEFAULT 0 ;
	FONT "Arial", 10 ;
	STYLE "BT"
@ 2.438,107.333 GET m.Color1 ;
	PICTURE "@^" ;
	FROM clrprmlist ;
	SIZE 1.500,21.167 ;
	DEFAULT 1 ;
	FONT "Arial", 10 ;
	STYLE "B" ;
	DISABLE
@ 4.063,107.333 GET m.Color2 ;
	PICTURE "@^" ;
	FROM clrscdlist ;
	SIZE 1.500,21.167 ;
	DEFAULT 1 ;
	FONT "Arial", 10 ;
	STYLE "B" ;
	VALID pColor2("Valid")	 ;
	DISABLE
@ 5.625,107.333 GET m.pattern ;
	PICTURE "@^" ;
	FROM clrpatlist ;
	SIZE 1.500,21.167 ;
	DEFAULT 1 ;
	FONT "Arial", 10 ;
	STYLE "B" ;
	VALID pPattern("Valid")	 ;
	DISABLE
@ 7.188,107.333 GET m.coat ;
	PICTURE "@^" ;
	FROM coatlist ;
	SIZE 1.500,21.167 ;
	DEFAULT 1 ;
	FONT "Arial", 10 ;
	STYLE "B" ;
	DISABLE
@ 8.813,107.333 GET m.tail ;
	PICTURE "@^" ;
	FROM tailList ;
	SIZE 1.500,21.167 ;
	DEFAULT 1 ;
	FONT "Arial", 10 ;
	STYLE "B" ;
	DISABLE
@ 10.438,107.333 GET m.leftEye ;
	PICTURE "@^" ;
	FROM eyeList ;
	SIZE 1.500,21.167 ;
	DEFAULT 1 ;
	FONT "Arial", 10 ;
	STYLE "B" ;
	VALID pLefteye("Valid")	 ;
	DISABLE
@ 12.063,107.333 GET m.rightEye ;
	PICTURE "@^" ;
	FROM eyeList ;
	SIZE 1.500,21.167 ;
	DEFAULT 1 ;
	FONT "Arial", 10 ;
	STYLE "B" ;
	VALID pRighteye("Valid") ;
	DISABLE
@ 13.688,107.333 GET m.leftEar ;
	PICTURE "@^" ;
	FROM earList ;
	SIZE 1.500,21.167 ;
	DEFAULT 1 ;
	FONT "Arial", 10 ;
	STYLE "B" ;
	VALID pLeftear("Valid") ;
	DISABLE
@ 15.313,107.333 GET m.rightEar ;
	PICTURE "@^" ;
	FROM earList ;
	SIZE 1.500,21.167 ;
	DEFAULT 1 ;
	FONT "Arial", 10 ;
	STYLE "B" ;
	VALID pRightear("Valid") ;
	DISABLE
@ 18.188,89.333 EDIT m.markings ;
	SIZE 3.000,39.167,0.000 ;
	DEFAULT " " ;
	FONT "Arial", 10 ;
	SCROLL
@ 22.563,89.333 EDIT m.notes ;
	SIZE 5.375,39.167,0.000 ;
	DEFAULT " " ;
	FONT "Arial", 10 ;
	SCROLL
@ 23.563,46.500 GET m.Button1 ;
	PICTURE "@*HN \<Identification...;Surr\<ender..." ;
	SIZE 1.438,19.833,1.667 ;
	DEFAULT 1 ;
	FONT "Arial", 10 ;
	STYLE "B" ;
	VALID pButton1("Valid") 
@ 25.125,46.500 GET m.Button2 ;
	PICTURE "@*HN P\<rofile...;Supervisor H\<old..." ;
	SIZE 1.438,19.833,1.667 ;
	DEFAULT 1 ;
	FONT "Arial", 10 ;
	STYLE "B" ;
	VALID pButton2("Valid")
@ 26.688,46.500 GET m.Button3 ;
	PICTURE "@*HN \<Quarantine...;\<Permit..." ;
	SIZE 1.438,19.833,1.667 ;
	DEFAULT 1 ;
	FONT "Arial", 10 ;
	STYLE "B" ;
	WHEN rcheck() ;
	VALID pButton3("Valid")
@ 28.563,2.000 GET m.button ;
	PICTURE "@*HN \<Search...;\\Histor\<y...;\\\<Medical...;\\\<Fees...;M\<ultiple...;C\<lear;\<Done;\?\<Cancel;\<Help..." ;
	SIZE 1.438,13.000,0.833 ;
	DEFAULT 1 ;
	FONT "Arial", 10 ;
	STYLE "B" ;
	WHEN _1200i5a5s() ;
	VALID pButton("Valid")	
@ 0.250,13.500 SAY gcUserId ;
	SIZE 0.875,20.000 ;
	FONT "Arial", 10
@ 0.188,40.333 SAY DATE() ;
	SIZE 0.875,11.167 ;
	FONT "Arial", 10
@ 0.188,59.000 SAY TIME() ;
	SIZE 0.875,9.500 ;
	FONT "Arial", 10
@ 9.125,1.500 SAY m.verbText ;
	SIZE 1.000,12.500 ;
	FONT "Arial", 10 ;
	STYLE "BT"
@ 1.313,33.333 SAY holdStat(m.AnimalNo) ;
	SIZE 1.000,40.000 ;
	FONT "Arial", 10 ;
	STYLE "BT" ;
	COLOR RGB(255,0,0,,,,)
@ 2.500,19.000 GET m.AnimalNo ;
	SIZE 1.000,19.500 ;
	DEFAULT " " ;
	FONT "Arial", 10 ;
	PICTURE "@K" ;
	VALID _1200i5a5y()
@ 24.250,9.333 TO 24.250,10.666 ;
	PEN 2, 8 ;
	STYLE "1"
@ 1.313,13.500 SAY iif(deleted("animal"),"* DELETED *","") ;
	SIZE 1.000,18.333 ;
	FONT "Arial", 10 ;
	STYLE "B" ;
	COLOR RGB(255,0,0,,,,)

IF NOT WVISIBLE("animal")
	ACTIVATE WINDOW animal
ENDIF

READ CYCLE MODAL ;
	WHEN _1200i5a64() ;
	SHOW _1200i5a65() ;
	WITH Animalid,Multiple,Permits,Surrendr

RELEASE WINDOW animal

#REGION 0

SET READBORDER &rborder

IF m.talkstat = "ON"
	SET TALK ON
ENDIF
IF m.compstat = "ON"
	SET COMPATIBLE ON
ENDIF


*       *********************************************************
*       *                                                         
*       *               ANIMAL/Windows Cleanup Code               
*       *                                                         
*       *********************************************************
*

#REGION 1
POP KEY ALL

*----------------------------------------------------------------------------------------------*
*             Screen Cleanup                                                                   *
*----------------------------------------------------------------------------------------------*
* Close opened databases.

= closedbf("Animal")
= closedbf("Rabies")
= closedbf("LicnSys")
= closedbf("Licenses")
= closedbf("Person")
= closedbf("Residenc")
= closedbf("OwnerShp")
= closedbf("FeesPaid")
= closedbf("Payments")
= closedbf("History")
= closedbf("Hold")
= closedbf("Breeders")
= closedbf("Fancied")
= closedbf("Medical")
= closedbf("Groupies")
= closedbf("Wldbreed")


* #INSERT programs\anmlclup.prg

* EXTERNAL ARRAY statgrplis, agelist, clrprmlist, clrscdlist, clrpatlist, coatlist, taillist, eyelist, earlist, coltyplist

*----------------------------------------------------------------------------------------------*
*             SCREEN FIELD PROCEDURES                                                          *
*----------------------------------------------------------------------------------------------*




*       *********************************************************
*       *                                                         
*       *   ANIMAL/Windows Supporting Procedures and Functions    
*       *                                                         
*       *********************************************************
*

#REGION 1
PROCEDURE AddHistEntry
PARAMETERS strCategory, strVerb, strSpecific, strHistoryNo

	=History("Category: " + strCategory, ;
	"Animal: " + m.animalno, ;
	"Verb: " + strVerb, ;
	"Noun: " + strHistoryNo, ;
	"Specific: " + TRIM( &strSpecific ), ;
	"Processor: " + gcuserid, ;
	"Timestamp: " + DTOC(DATE()) + " " + showtime(gettime(TIME())), ;
	"Actiondt: " + DTOC(m.founddate), ;
	"haveLock", ;
	"Store")

RETURN





PROCEDURE pbutton
   PARAMETER pcaction

   *** If they are pressing one of these keys, valid fields.
   IF INLIST(m.button, donebutton, feesbutton, medicalbutton, multiplebutton)
      IF !validfld()
         RETURN
      ENDIF
   ENDIF

   DO CASE
   CASE m.button = searchbutton
      = runansearch()
   CASE m.button = historybutton
      DO history.spr WITH m.animalno
   CASE m.button = medicalbutton
      = saveanimal()
      DIMENSION temparray[1]
      = arrayg(@animalfields, @temparray)
      tmpdescription = anmltext(@temparray, 0, .T.)
      DO medical.spr WITH m.animalno, m.tmpdescription, m.notes
      SHOW GETS
   CASE m.button = feesbutton
      IF m.animalno = cctxtnew
         m.wasnew = .T.		&& This is a hack, we should fix saveAnimal() instead
      ENDIF
      m.didhistory = checkfees()
   CASE m.button = multiplebutton
      = saveanimal()
      tmptext = IIF(m.searched, "animalSearched", "animalStart")
      tmpdescription = anmltext(@&tmptext , 0, .T.)
      m.didhistory = .T.
      passvar = m.animalno

      DO multiple.spr WITH passvar, groupno, tmpdescription
      DO CASE
      CASE passvar == m.animalno
         && Nothing happened
      CASE ALLTRIM(passvar) == "New"
         m.animalno = "New"
         m.oldnum = "New"
         m.didhistory = .F.
         SHOW GET m.animalno
         _CUROBJ = OBJNUM(m.animalname)
         = idsetup(m.animalno, @idarray)	&& New set of ID's.
      CASE goodcode(passvar, "A")
         m.animalno = m.passvar
         IF !loadanimal(.F.)
            m.animalno = m.oldnum
            SHOW GET m.animalno
         ENDIF
      OTHERWISE
         WAIT WINDOW "Bizarre but harmless error. Fill out a bug report form."
      ENDCASE
   CASE m.button = clearbutton
      *** This button will clear the screen to a empty fresh one.
      IF m.searched
         whicharray = "animalSearched"
      ELSE
         whicharray = "animalStart"
      ENDIF

      IF arraycomp(@animalfields, @&whicharray )
         DO clearscreen
      ELSE
         IF msgbox("Do you want to clear without saving changes?","Warning",260)=6
            DO clearscreen
         ELSE
            RETURN .T.
         ENDIF
      ENDIF

   CASE m.button = donebutton
      =saveanimal()

      * If we came from another screen we will skip this and return back.
      IF RDLEVEL() < 3 AND ;
      	 iniedit(getifile(), "Reports", "PrintDialog", "Yes") = "Yes"
      	
         * Initialize print switches.
         llkennelcard = !INLIST(animal.kennel, "(Disposition)", cctxtunspec)

         llinstat = NOT (INLIST(m.statusgrou, "Found", "Field Ops") OR ;
         	(m.statusgrou = "Owned" AND ;
            INLIST(m.status, "Document", "Quarantine- Home", "Quarantine- Vet")))

         llanmlrcpt = IIF(wintitle = "Animal Receiving", llinstat, .F.)
         llfeercpt = IIF(m.paymentcode = cctxtunspec, .F., .T.)
         llmedical = .F.
         llprintsel = .F.
         lncopies1 = admin.kencardcps
         lncopies2 = admin.incrcptcps
         lncopies3 = admin.feercptcps
         lncopies4 = admin.surgconcps

         * Print selected documents
         IF prnsel1()
            IF llkennelcard
               = prnkcard(m.animalno, llprintsel, lncopies1)
            ENDIF
            IF llanmlrcpt
               = dumpreceipt(llprintsel, lncopies2)
            ENDIF
            IF llfeercpt
               = prnfeer(m.paymentcode, llprintsel, lncopies3)
            ENDIF
            IF llmedical
               = prnsurge(m.animalno, llprintsel, lncopies4)
            ENDIF
         ENDIF

         DO clearscreen

      ELSE
         * Move animal number back to be returned to calling program.
         animalnum = m.animalno
         personno = m.whichperson
         CLEAR READ
      ENDIF						&& if rdlevel() < 3

      IF m.status="DOA" OR IIF(TYPE("M.Dispositio")="C",m.dispositio="Euthanised",.F.)
         DO noids IN euthan.spr
      ENDIF

   CASE m.button = cancelbutton
      IF m.searched
         whicharray = "animalSearched"
      ELSE
         whicharray = "animalStart"
      ENDIF

      IF arraycomp(@animalfields, @&whicharray )
         CLEAR READ
      ELSE
         IF msgbox("Do you want to exit without saving changes?", "Warning",260)=6
            CLEAR READ
         ELSE
            RETURN .T.
         ENDIF
      ENDIF

   CASE m.button = helpbutton
      lchelptopic = wintitle + " Screen"
      HELP &lchelptopic
   ENDCASE

*----------------------------------------------------------------------------------------------*
PROCEDURE panimalno
   PARAMETER pcaction, temp

   IF LASTKEY() = 27
      RETURN .T.
   ENDIF

   IF ALLTRIM(m.animalno) == cctxtnew OR ALLTRIM(m.animalno) == cctxtunspec
      m.animalno = padtrim(m.animalno)
      SHOW GET m.animalno
      RETURN .T.
   ENDIF

   IF m.animalno == m.oldnum
      RETURN .T.
   ENDIF
   = proccode(@m.animalno, "A",temp)
   IF goodcode(m.animalno, "A")
      tmpnum = m.animalno
      m.animalno = m.oldnum
      IF !dolosscheck(.F.)
         SHOW GET m.animalno
         RETURN .T.
      ELSE
         m.animalno = m.tmpnum
      ENDIF
      RETURN  loadanimal(.F.)
   ELSE
      WAIT WINDOW "Invalid format for animal code..."
      m.animalno = m.oldnum
      SHOW GET m.animalno
      RETURN .F.
   ENDIF

*----------------------------------------------------------------------------------------------*
PROCEDURE pstatusgroup
   PARAMETER pcaction

   IF !unspec(m.statusgrou)
      = statusparams()
      SHOW GET m.status ENABLE
   ELSE
      m.status = cctxtunspec
      SHOW GET m.status DISABLE
   ENDIF

   PRIVATE idx
   idx = subscan(@statgrplist, m.statusgrou, 1)
   m.verbtext = statgrplist[idx, SG_VERB]
   m.relationship = statgrplist[idx, SG_RELATION]
   ownerlist[1,OWNER_RELATION] = m.relationship	&& New persons will have correct relationship
   SHOW GETS OFF

*----------------------------------------------------------------------------------------------*
PROCEDURE pstatus
   PARAMETER pcaction

   IF INLIST(m.statusgrou, "Found", "Field Ops") OR (m.statusgrou = "Owned" AND ;
         INLIST(m.status, "Document", "Quarantine- Home", "Quarantine- Vet"))
      m.entrypoint = "Field"
      SHOW GET m.entrypoint DISABLE
      m.kennel = cctxtunspec
      SHOW GET m.kennel DISABLE
      IF !gllaptop
         SHOW GET m.adoptable DISABLE
      ENDIF
   ELSE
      SHOW GET m.entrypoint ENABLE
      SHOW GET m.kennel ENABLE
      IF !gllaptop
         SHOW GET m.adoptable ENABLE
      ENDIF
   ENDIF

   = checkevil()
   = enableanimal()

*---------------------------------------------------------------------------------------------*
PROCEDURE pbutton1
PARAMETER pcaction

DO CASE
   CASE m.button1 = 1
      DO animalid.spr WITH m.animalno
      IF goodcode(m.animalno, "A")
         m.hadid = hasid(m.animalno)
      ELSE
         IF ALEN(idarray, 1) > 1
            m.hadid = .T.
         ENDIF
      ENDIF
      = updateicons()
      SHOW GET m.notes
   CASE m.button1 = 2
      DO surrendr.spr
      = checkevil()
      SHOW GET m.notes
ENDCASE

*---------------------------------------------------------------------------------------------*
PROCEDURE pbutton2
PARAMETER pcaction

   DO CASE
   CASE m.button2 = 1
      m.behavior = .T.
      DO behavior.spr
   CASE m.button2 = 2
      && Supervisor hold
      DO hold.spr WITH m.animalno
      SHOW GETS
   ENDCASE

*----------------------------------------------------------------------------------------------*
PROCEDURE pbutton3
   PARAMETER pcaction

   DO CASE
   CASE m.button3 = 1
      IF EMPTY(m.animalno) OR INLIST(m.animalno, cctxtnew, cctxtunspec)
         = saveanimal()
      ENDIF
      DO quarlist.spr WITH m.animalno
   CASE m.button3 = 2
      IF !goodcode(m.animalno, "A")
         m.animalno = newnum("animal")
         WAIT WINDOW "Animal code " + m.animalno + " assigned, record not saved." NOWAIT
      ENDIF
      DIMENSION temparray[1]
      = arrayg(@animalfields, @temparray)
      tmpdescription = anmltext(@temparray, 0, .T.)

      DO permits.spr WITH m.animalno, m.whichperson, "Unspecified", m.tmpdescription
      = checkevil()
   ENDCASE

*----------------------------------------------------------------------------------------------*
PROCEDURE pcity
   PARAMETER pcaction
  =properize("city")
   SHOW GET m.city

*----------------------------------------------------------------------------------------------*
PROCEDURE pkennel
   PARAMETER pcaction

   kennelidx = subscan(@kennellist, m.kennel, 1)
   IF kennelidx = 0
      RETURN .T.
   ENDIF
   IF kennellist[kennelIdx, KNL_NUMBERED]
      m.kennelno = 1
      m.curkennelmax = kennellist[kennelIdx, KNL_MAX]
      SHOW GET m.kennelno ENABLE
   ELSE
      m.kennelno = 0
      SHOW GET m.kennelno DISABLE
   ENDIF
   IF ALLTRIM(m.kennel) == "(Disposition)"
      SHOW GET m.dispositio ENABLE
   ELSE
      SHOW GET m.dispositio DISABLE
   ENDIF


*----------------------------------------------------------------------------------------------*
PROCEDURE panimalname
   PARAMETER pcaction

   =properize("animalname")
   SHOW GET m.animalname

*----------------------------------------------------------------------------------------------*
PROCEDURE pfndtimetext
   PARAMETER pcaction

   m.foundtime = gettime(fndtimetext)
   fndtimetext = showtime(m.foundtime)
   SHOW GET m.fndtimetext

*----------------------------------------------------------------------------------------------*
PROCEDURE pspecies
   PARAMETER pcaction

   DO CASE
   CASE pcaction = "Valid"
      IF !unspec(m.species)
         = animalparams(m.species)
         = enableanimal()
      ELSE
         m.color1 = cctxtunspec
         m.color2 = cctxtunspec
         m.pattern = cctxtunspec
         m.coat = cctxtunspec
         m.tail = cctxtunspec
         m.lefteye = cctxtunspec
         m.righteye = cctxtunspec
         m.leftear = cctxtunspec
         m.rightear = cctxtunspec
         m.collartyp1 = cctxtunspec
         m.collarclr1 = cctxtunspec
         m.collartyp2 = cctxtunspec
         m.collarclr2 = cctxtunspec
         m.collartyp3 = cctxtunspec
         m.collarclr3 = cctxtunspec
         llmultcollar = .F.
         m.breed1 = cctxtunspec
         m.breed2 = cctxtunspec
         = disableanimal()
         SHOW GETS
      ENDIF

   CASE pcaction = "When"
      RETURN .T.
   ENDCASE

*----------------------------------------------------------------------------------------------*
PROCEDURE pbirthdate
   PARAMETER pcaction
   DO CASE
   CASE pcaction = "Valid" AND !unspec(m.birthdate)
      =year2000(@m.birthdate)
      IF lcbdaytemp # m.birthdate
         m.age = DATE() - m.birthdate
         m.agetext = showage(m.age)
         SHOW GET m.agetext
      ENDIF
      RELEASE lcbdaytemp
   CASE pcaction = "When"
      PUBLIC lcbdaytemp
      lcbdaytemp = m.birthdate
   ENDCASE

*----------------------------------------------------------------------------------------------*
PROCEDURE pagetext
   PARAMETER pcaction
   DO CASE
   CASE pcaction = "Valid"
      IF lcagetemp # m.agetext AND !unspec(m.agetext) && (m.agetext != "Unspecified")
         m.age = getage(m.agetext)
         m.birthdate = DATE() - m.age
         && Set the age group
         m.agetext = showage(m.age)
         SHOW GET m.agetext
         SHOW GET m.birthdate
         IF m.agecolumn != generic_idx
            FOR i = ALEN(agelist,1) - 1 TO 1 STEP -1
               IF agelist[i, AGE_IDX] <= m.age
                  EXIT
               ENDIF
            ENDFOR
            m.agegroup = agelist[i, m.ageColumn]
            SHOW GET m.agegroup
         ENDIF
      ENDIF
      RELEASE lcagetemp
   CASE pcaction = "When"
      *** Save the current value so we can check in the
      *** valid clause to see if it was changed.
      PUBLIC lcagetemp
      lcagetemp = m.agetext
   ENDCASE

*----------------------------------------------------------------------------------------------*
PROCEDURE pweightext
   PARAMETER pcaction

   IF gweight(m.weightext) < 0
      m.weightext = "Unspecified"
   ELSE
      m.weight = gweight(m.weightext)
      m.weightext = sweight(m.weight)
   ENDIF
   SHOW GET m.weightext

*----------------------------------------------------------------------------------------------*
PROCEDURE pcollartype
   PARAMETER pcaction

   IF ALLTRIM(m.collartyp1) == "None"
      m.collarclr1 = "No Collar"
      SHOW GET m.collarclr1
   ENDIF

*----------------------------------------------------------------------------------------------*
PROCEDURE pcollarcolor
   PARAMETER pcaction

   IF ALLTRIM(m.collarclr1) == "No Collar"
      m.collartyp1 = "None"
      SHOW GET m.collartyp1
   ENDIF

*----------------------------------------------------------------------------------------------*
PROCEDURE pcolor2
   PARAMETER pcaction

   IF ALLTRIM(m.color2) == "None"
      m.pattern = "Solid"
      SHOW GET m.pattern
   ENDIF

*----------------------------------------------------------------------------------------------*
PROCEDURE ppattern
   PARAMETER pcaction

   IF ALLTRIM(m.pattern) == "Solid"
      m.color2 = "None"
      SHOW GET m.color2
   ENDIF

*----------------------------------------------------------------------------------------------*
PROCEDURE plefteye
   PARAMETER pcaction

   IF !unspec(m.lefteye)
      m.righteye = m.lefteye
      SHOW GET m.righteye
   ENDIF

*----------------------------------------------------------------------------------------------*
PROCEDURE prighteye
   PARAMETER pcaction

   IF !unspec(m.righteye) AND unspec(m.lefteye)
      m.lefteye = m.righteye
      SHOW GET m.lefteye
   ENDIF

*----------------------------------------------------------------------------------------------*
PROCEDURE pleftear
   PARAMETER pcaction

   IF !unspec(m.leftear)
      m.rightear = m.leftear
      SHOW GET m.rightear
   ENDIF

*----------------------------------------------------------------------------------------------*
PROCEDURE prightear
   PARAMETER pcaction

   IF !unspec(m.rightear) AND unspec(m.leftear)
      m.leftear = m.rightear
      SHOW GET m.leftear
   ENDIF

*----------------------------------------------------------------------------------------------*
PROCEDURE pbehavebutton
   PARAMETER pcaction

   m.behavior = .T.
   DO behavior.spr

*----------------------------------------------------------------------------------------------*
PROCEDURE pmultcollar
   PARAMETER pcaction

   DO multcolr.spr

   *** Check and see if there are multiple collars.
   IF INLIST(m.collartyp2, "None", cctxtunspec, " ") AND INLIST(m.collartyp3, "None", cctxtunspec, " ")
      llmultcollar = .F.
   ELSE
      llmultcollar = .T.
   ENDIF

   SHOW GET m.collartyp1
   SHOW GET	m.collarclr1
   SHOW GET llmultcollar

*----------------------------------------------------------------------------------------------*
PROCEDURE pfounddt
   PARAMETER pcaction

   m.founddate = IIF(EMPTY(m.founddate),DATE(),m.founddate)

   = year2000(@m.founddate)

*----------------------------------------------------------------------------------------------*
*                       SCREEN FUNCTIONS                                                       *
*----------------------------------------------------------------------------------------------*
PROCEDURE validfld
   PRIVATE errortxt

   errortxt = ""
   errortxt = IIF((ALLTRIM(m.statusgrou) == cctxtunspec OR EMPTY(m.statusgrou)), ;
      errortxt + "Status Group,", errortxt)
   errortxt = IIF((ALLTRIM(m.status) == cctxtunspec OR EMPTY(m.status)), ;
      errortxt + " Incoming Status,", errortxt)
   errortxt = IIF(ALLTRIM(m.entrypoint) == cctxtunspec AND (!INLIST(m.statusgrou,"Found", "Field Ops") ;
      AND NOT (m.statusgrou = "Owned" AND INLIST(m.status, "Document", "Quarantine- Home", "Quarantine- Vet"))), ;
      errortxt + " Entry Point,", errortxt)
   IF !gllaptop
      errortxt = IIF(ALLTRIM(m.kennel) == cctxtunspec AND (!INLIST(m.statusgrou,"Found", "Field Ops") ;
         AND NOT (m.statusgrou = "Owned" AND INLIST(m.status, "Document", "Quarantine- Home", "Quarantine- Vet"))), ;
         errortxt + " Current Location,", errortxt)
   ENDIF
   IF (ALLTRIM(m.breed1) == cctxtunspec)
      errortxt = IIF(ALLTRIM(m.species) == cctxtunspec,;
         (errortxt + " Species" + "," + " Primary Breed"),(errortxt + " Primary Breed"))
   ENDIF

   IF EMPTY(errortxt)
      RETURN .T.
   ELSE
      errortxt = "The following field(s) must be entered: " + errortxt
      IF (m.button != clearbutton) AND (m.button != cancelbutton)
         = alert(errortxt)
         RETURN .F.
      ENDIF
      RETURN .T.
   ENDIF

*----------------------------------------------------------------------------------------------*
   * Run Animal Search
PROCEDURE runansearch
   = arrayg(@animalfields, @animalarr)
   = storeidarr("arr")
   retval = ""
   lnsearchtype = 1
   lnaccuracy = admin.baccuracy

   *** If stray see if they want to search lost reports.
   IF INLIST(m.statusgrou, "Stray", "Found")
      IF fndsrch()
         DO search.spr WITH "lostrpts", retval, .F., .F., .T., (lnsearchtype = 1)
         = arrays(@animalfields, @animalarr)
         RETURN
      ENDIF
   ELSE
      IF srchcrit()
         DO search.spr WITH "animal", retval, .F., .F., .F., .T., lnaccuracy, lnsearchtype
      ENDIF
   ENDIF

   IF goodcode(retval, "A")
      m.searched = .T.
      m.animalno = retval
      RETURN loadanimal(.F.)
   ENDIF
   RETURN .T.

*----------------------------------------------------------------------------------------------*
   * Dump the current ID array into one of the various ones used for storage when
   * other records are loaded (as in searching).
PROCEDURE storeidarr
   PARAMETER whichever

   DIMENSION id&whichever.[ALEN(IDarray,1), ALEN(IDarray,2)]
   = ACOPY(idarray, id&whichever )
   RETURN .T.

*----------------------------------------------------------------------------------------------*
   * Refill the current ID array from one of the various ones used for storage.
PROCEDURE loadidarr
   PARAMETER whichever

   DIMENSION idarray[ALEN(ID&whichever ,1), ALEN(ID&whichever ,2)]
   = ACOPY(id&whichever , idarray)
   RETURN .T.

*----------------------------------------------------------------------------------------------*
* Load in an animal based on code number. If fromMemory is .T., load from memory
* (the animalStart or animalArr arrays, depending on whether one is returning
* from a search or not).
PROCEDURE loadanimal
   PARAMETER frommemory

   IF frommemory
      IF m.searched
         = arrays(@animalfields, @animalarr)
         = loadidarr("arr")
      ELSE
         = arrays(@animalfields, @animalstart)
         = loadidarr("start")
      ENDIF
      m.oldnum = m.animalno
   ELSE
      SELECT animal
      SET ORDER TO animalno
      IF SEEK(m.animalno)
         IF animal.dispositio = "Merged :"
            lctempanimal = SUBSTR(animal.dispositio, 10, 11)
            = msgbox("This record has been merged with another record.  The new record is being opened.", "Warning",64)
            IF !SEEK(lctempanimal)
               = msgbox("Animal record " + lctempanimal + " not found.", "Warning",48)
               RETURN .F.
            ENDIF
         ENDIF
         SCATTER MEMO MEMVAR
         = idsetup(m.animalno, @idarray)
         m.oldnum = m.animalno
      ELSE
         IF PROPER(iniedit(inifile,"animal","NonPetWhereNumbers",'no')) = "Yes"
            IF msgbox("Animal record " + m.animalno + " not found."+CHR(10)+"Use anyway?", "Warning",48+4+256) = 7
               RETURN .F.
            ENDIF
         ELSE
            = msgbox("Animal record " + m.animalno + " not found.", "Warning",48)
            RETURN .F.
         ENDIF
      ENDIF
   ENDIF

   m.whichperson = "Unspecified"
   = animalparams(m.species)	&& Initialize popups and pointers
   = enableanimal()			&& Turn on and off appropriate widgets
   = statusparams()

   IF m.searched
      = arrayg(@animalfields, @animalsearched)
      = storeidarr("searched")
   ELSE
      = arrayg(@animalfields, @animalstart)
      = storeidarr("start")
   ENDIF

   && Set various text pieces of the screen based on not-so-readable data.

   m.fndtimetext = showtime(m.foundtime)
   m.weightext = sweight(m.weight)
   m.disposed = INLIST(ALLTRIM(m.kennel), "(Disposition)", "Unspecified")
   SHOW GET m.weightext ENABLE
   m.age = DATE() - m.birthdate
   m.agetext = showage(m.age)

   IF !unspec(m.statusgrou)
      && Fill the thing in appropriately for the status group
      && It's about time we started loading some of these things into memory
      && at startup, to save time on normal accessing and so we can associate
      && things with them.
      m.verbtext = statusbase[subscan(@statusBase, m.statusgrou, 1), 2]
   ELSE
      DO CASE
      CASE wintitle == "Animal Information"
         m.verbtext = "Received:"
      CASE wintitle == "Animal Receiving"
         m.verbtext = "Received:"
      CASE wintitle == "Lost and Found"
         m.verbtext = "Lost:"
      ENDCASE
   ENDIF

   xtmpidx = ASCAN(kennellist, m.kennel)
   IF xtmpidx = 0	&& Not in list, so we take our best guess
      IF m.kennelno > 0
         SHOW GET m.kennelno ENABLE
      ELSE
         SHOW GET m.kennelno DISABLE
      ENDIF
   ELSE
      kennelidx = ASUBSCRIPT(kennellist, xtmpidx, 1)
      IF kennellist[kennelIdx, KNL_NUMBERED]
         m.curkennelmax = kennellist[kennelIdx, KNL_MAX]
         SHOW GET m.kennelno ENABLE
      ELSE
         SHOW GET m.kennelno DISABLE
      ENDIF

   ENDIF

   IF ALLTRIM(m.kennel) == "(Disposition)"
      SHOW GET m.dispositio ENABLE
   ELSE
      SHOW GET m.dispositio DISABLE
   ENDIF

   SHOW GET m.agetext ENABLE
   = setpersonlist()

   SHOW GET m.button, donebutton ENABLE		
   SHOW GET m.button, historybutton ENABLE		
   SHOW GET m.button, medicalbutton ENABLE		

   *** Check and see if there are multiple collars.
   IF INLIST(m.collartyp2, "None", cctxtunspec, " ") AND INLIST(m.collartyp3, "None", cctxtunspec, " ")
      llmultcollar = .F.
   ELSE
      llmultcollar = .T.
   ENDIF

   *** Store status so we can see if it changes later.
   lcstatushold = m.status

   m.hadid = hasid(m.animalno)

   SHOW GETS
   =partmult( m.animalno )
   RETURN .T.

*----------------------------------------------------------------------------------------------*
* Load in information on all people related to this animal.
* Be careful how this gets called with the Multiple screen in the neighborhood...
*----------------------------------------------------------------------------------------------*
* Turn on or off appropriate widgets based on the current mode.
PROCEDURE enableanimal

   IF unspec(m.species)
      RETURN .T.
   ENDIF

   SHOW GET m.breed1 ENABLE
   SHOW GET m.breed2 ENABLE
   SHOW GET m.color1 ENABLE
   SHOW GET m.color2 ENABLE
   SHOW GET m.pattern ENABLE
   SHOW GET m.collartyp1 ENABLE
   SHOW GET m.collarclr1 ENABLE
   SHOW GET llmultcollar ENABLE
   SHOW GET m.status ENABLE
   SHOW GET m.weightext ENABLE
   SHOW GET m.weightgrp ENABLE
   SHOW GET m.surrender ENABLE
   SHOW GET m.altered ENABLE
   SHOW GET m.coat ENABLE
   SHOW GET m.tail ENABLE
   SHOW GET m.lefteye ENABLE
   SHOW GET m.righteye ENABLE
   SHOW GET m.leftear ENABLE
   SHOW GET m.rightear ENABLE

   RETURN .T.

*----------------------------------------------------------------------------------------------*
   && Turn off lots of widgets.
PROCEDURE disableanimal

   SHOW GET m.status DISABLE
   SHOW GET m.breed1 DISABLE
   SHOW GET m.breed2 DISABLE
   SHOW GET m.color1 DISABLE
   SHOW GET m.color2 DISABLE
   SHOW GET m.pattern DISABLE
   SHOW GET m.collartyp1 DISABLE
   SHOW GET m.collarclr1 DISABLE
   SHOW GET llmultcollar DISABLE
   SHOW GET m.weightext DISABLE
   SHOW GET m.weightgrp DISABLE
   SHOW GET m.surrender DISABLE
   SHOW GET m.altered DISABLE
   SHOW GET m.coat DISABLE
   SHOW GET m.tail DISABLE
   SHOW GET m.lefteye DISABLE
   SHOW GET m.righteye DISABLE
   SHOW GET m.leftear DISABLE
   SHOW GET m.rightear DISABLE
   RETURN .T.

*----------------------------------------------------------------------------------------------*
   * Load up appropriate tables based on species.
PROCEDURE animalparams
   PARAMETER critter_type

   IF unspec(critter_type)
      && Properly, we should zero out all the tables, but they should be disabled anyway...
      RETURN .T.
   ENDIF

   IF SUBSTR(critter_type, 1, 4) == "Wild"
      m.type = SUBSTR(critter_type, 6)
      SELECT wldbreed
      SELECT breed FROM wldbreed INTO ARRAY breedlist WHERE (wldbreed.species == critter_type OR wldbreed.species == "Any")
      SELECT breed FROM wldbreed INTO ARRAY breed2list WHERE (wldbreed.species == critter_type OR wldbreed.species == "Any" OR wldbreed.species == "Secondary")
   ELSE
      m.type = critter_type
      SELECT breed, SIZE FROM breeds INTO ARRAY breedlist WHERE (breeds.species == critter_type OR breeds.species == "Any")
      SELECT breed FROM breeds INTO ARRAY breed2list WHERE (breeds.species == critter_type OR breeds.species == "Any" OR breeds.species == "Secondary")
   ENDIF

   DO CASE
   CASE ALLTRIM(critter_type) == "Cat"
      agecolumn = cat_idx
   CASE ALLTRIM(critter_type) == "Dog"
      agecolumn = dog_idx
   CASE "Bird"$critter_type
      agecolumn = bird_idx
   OTHERWISE
      agecolumn = generic_idx
   ENDCASE

   SHOW GET m.agegroup
   tmp = SELECT(0)

   SELECT anmlvars
   SCAN
      tmpalpha = ALLTRIM(TABLE)
      tmpbeta = ALLTRIM(DATABASE)
      tmpgamma = ALLTRIM(FIELD)
      SELECT &tmpgamma FROM &tmpbeta INTO ARRAY &tmpalpha WHERE &tmpbeta..&type = .T.
      SELECT (tmpbeta)
      USE
   ENDSCAN
   if !unspec(m.breed1) and ascan(breedlist, m.breed1) = 0
     m.breed1=cctxtunspec
     show get m.breed1
   endif
   if !unspec(m.breed2) and ascan(breed2list, m.breed2) = 0
     m.breed2=cctxtunspec
     show get m.breed2
   endif

   SELECT (tmp)
   RETURN .T.

*----------------------------------------------------------------------------------------------*
   * Load up appropriate tables based on statusgrou.
PROCEDURE statusparams

   IF unspec(m.statusgrou)
      RETURN .T.
   ENDIF

   DIMENSION statuslist[1,1]
   DO CASE
   CASE ALLTRIM(m.statusgrou) == "Clinic"
      DIMENSION statuslist[5,1]
      statuslist[1,1] = "Clinic Service"
      statuslist[2,1] = "Injured"
      statuslist[3,1] = "Sick"
      statuslist[4,1] = "Spay/Neuter"
      statuslist[5,1] = "(See Notes)"
   CASE ALLTRIM(m.statusgrou) == "Field Ops"
      DIMENSION statuslist[2,1]
      statuslist[1,1] = "Document"
      statuslist[2,1] = "(See Notes)"
   CASE ALLTRIM(m.statusgrou) == "Found" OR ALLTRIM(m.statusgrou) == "Sighted"
      DIMENSION statuslist[2,1]
      statuslist[1,1] = "At-Large"
      statuslist[2,1] = "(See Notes)"
   CASE ALLTRIM(m.statusgrou) == "Owned"
      DIMENSION statuslist[18,1]
      statuslist[1,1] = "Cremation: Communal"
      statuslist[2,1] = "Cremation: Private"
      statuslist[3,1] = "Dangerous"
      statuslist[4,1] = "DOA"
      statuslist[5,1] = "Document"
      statuslist[6,1] = "Euthanasia/Cremation: Communal"
      statuslist[7,1] = "Euthanasia/Cremation: Private"
      statuslist[8,1] = "Euthanasia Request"
      statuslist[9,1] = "Evidence Hold"
      statuslist[10,1] = "Field Services"
      statuslist[11,1] = "Humane"
      statuslist[12,1] = "Protective Custody"
      statuslist[13,1] = "Quarantine- Home"
      statuslist[14,1] = "Quarantine- Shelter"
      statuslist[15,1] = "Quarantine- Vet"
      statuslist[16,1] = "Return"
      statuslist[17,1] = "Surrender"
      statuslist[18,1] = "(See Notes)"
   CASE ALLTRIM(m.statusgrou) == "Stray"
      DIMENSION statuslist[12,1]
      statuslist[1,1] = "At-Large"
      statuslist[2,1] = "Dangerous"
      statuslist[3,1] = "DOA"
      statuslist[4,1] = "Evidence Hold"
      statuslist[5,1] = "Field Services"
      statuslist[6,1] = "Humane"
      statuslist[7,1] = "Injured"
      statuslist[8,1] = "Quarantine- Shelter"
      statuslist[9,1] = "Sick"
      statuslist[10,1] = "Surrender"
      statuslist[11,1] = "Trapped"
      statuslist[12,1] = "(See Notes)"
   CASE ALLTRIM(m.statusgrou) == "Lost" OR ALLTRIM(m.statusgrou) == "Wildlife"
      DIMENSION statuslist[9,1]
      statuslist[1,1] = "At-Large"
      statuslist[2,1] = "Dangerous"
      statuslist[3,1] = "DOA"
      statuslist[4,1] = "Injured"
      statuslist[5,1] = "Quarantine- Shelter"
      statuslist[6,1] = "Sick"
      statuslist[7,1] = "Surrender"
      statuslist[8,1] = "Trapped"
      statuslist[9,1] = "(See Notes)"
   OTHERWISE
      m.status = cctxtunspec
   ENDCASE

   *** If status group = found we do not want the user to enter these fields.
   IF INLIST(m.statusgrou, "Found", "Field Ops") OR (m.statusgrou = "Owned" AND ;
         INLIST(m.status, "Document", "Quarantine- Home", "Quarantine- Vet"))
      m.entrypoint = "Field"
      SHOW GET m.entrypoint DISABLE
      m.kennel = cctxtunspec
      SHOW GET m.kennel DISABLE
      IF !gllaptop
         SHOW GET m.adoptable DISABLE
      ENDIF
   ELSE
      SHOW GET m.entrypoint ENABLE
      SHOW GET m.kennel ENABLE
      IF !gllaptop
         SHOW GET m.adoptable ENABLE
      ENDIF
   ENDIF

   *** Load pull down arrays.
   IF ALLTRIM(m.statusgrou) == "Wildlife"
      SELECT species FROM species.dbf INTO ARRAY specieslist WHERE species.wild
   ELSE
      SELECT species FROM species.dbf INTO ARRAY specieslist WHERE species.domestic
   ENDIF
   SHOW GET m.species

   RETURN .T.

*----------------------------------------------------------------------------------------------*
   * Save the current record to the database.
FUNCTION saveanimal

   IF m.searched
      whicharray = "animalSearched"
   ELSE
      whicharray = "animalStart"
   ENDIF

   IF arraycomp(@animalfields, @&whicharray )
      RETURN .T.		&& No changes, no need to save.  This means that you can't save a record that is completely unspecified, which is as it should be.
   ENDIF

   SHOW GETS OFF
   SELECT animal
   admitverb = statusbase[subscan(@statusBase, m.statusgrou, 1), STAT_HISTVERB]

   * This also needs to get integrated with code checking for whether they
   * modified the record after they ran the history thing
   IF ALLTRIM(m.animalno) == cctxtnew
      m.animalno = newnum("animal")
      wasnew = .T.
      m.oldnum = m.animalno
      SHOW GET m.animalno
      =newrec()
      GATHER MEMVAR MEMO
      = lastupdt()
      IF !didhistory
         = savenew(m.admitverb)
         = deathextras()
      ENDIF
   ELSE
      IF !SEEK(m.animalno)
         wasnew = .T.
         =newrec()
         GATHER MEMVAR MEMO
         = lastupdt()
         * Not an error, since we can have our number added by the person screen. The Person screen
         * should actually force this one to save, but that's for later.
         IF !didhistory
            = savenew(m.admitverb)
            = deathextras()
         ENDIF
      ELSE
         *** Update Animal record.
         GATHER MEMVAR MEMO
         = lastupdt()
         IF !didhistory
            IF m.disposed AND ALLTRIM(m.kennel) != "(Disposition)"
               = savenew(m.admitverb)
               = deathextras()
            ELSE
               IF !m.disposed AND ALLTRIM(m.kennel) = "(Disposition)"
                  = HISTORY("Category: Shelter Exit", ;
                     "Animal: "+m.animalno, ;
                     "Verb: " + m.dispositio, ;
                     "Specific: " + m.statusgrou, ;
                     "Finish: " + ALLTRIM(m.kennel)+","+ALLTRIM(STR(m.kennelno, 3)), ;
                     "Processor: " + gcuserid, ;
                     "Timestamp: " + DTOC(DATE()) + " " + showtime(gettime(TIME())), ;
                     "haveLock", ;
                     "Store")
               ELSE
                  IF lcstatushold # m.status
                     = HISTORY("Category: Administrative", ;
                        "Animal: " + m.animalno, ;
                        "Verb: Modified", ;
                        "Noun: Status", ;
                        "Specific: from " + TRIM(lcstatushold) + " to " + TRIM(m.status), ;
                        "Processor: " + gcuserid, ;
                        "Timestamp: " + DTOC(DATE()) + " " + showtime(gettime(TIME())), ;
                        "haveLock", ;
                        "Store")
                  ELSE
                     = HISTORY("Category: Administrative", ;
                        "Animal: " + m.animalno, ;
                        "Verb: Modified", ;
                        "Noun: Record", ;
                        "Specific: Animal", ;
                        "Processor: " + gcuserid, ;
                        "Timestamp: " + DTOC(DATE()) + " " + showtime(gettime(TIME())), ;
                        "haveLock", ;
                        "Store")
                  ENDIF
               ENDIF
            ENDIF
         ENDIF
      ENDIF
   ENDIF

   *** Write history records if adoption box checked or unchecked.
   IF wasnew AND m.adoptable OR m.adoptable AND NOT animal.adoptable
      = HISTORY("animal: "+ m.animalno, ;
         "category: Administrative", ;
         "Timestamp: " + DTOC(DATE()) + " " + showtime(gettime(TIME())), ;
         "processor: "+ lcapprover, ;
         "verb: " + "Approved", ;
         "noun: for Adoption", ;
         "haveLock", ;
         "Store")
   ELSE
      IF NOT wasnew AND animal.adoptable AND NOT m.adoptable
         = HISTORY("animal: "+ m.animalno, ;
            "category: Administrative", ;
            "Timestamp: " + DTOC(DATE()) + " " + showtime(gettime(TIME())), ;
            "processor: "+ lcapprover, ;
            "verb: " + "Unapproved", ;
            "noun: for Adoption", ;
            "haveLock", ;
            "Store")
      ENDIF
   ENDIF

   IF ALEN(idarray,1) > 1
      SELECT licenses
      FOR i = 2 TO ALEN(idarray,1)
         IF idarray[i,ID_IDX] = "New"	&& Only have in memory
            =newrec()
            idarray[i, ID_IDX] = newnum("LicenseId")
            REPLACE licenses.license WITH idarray[i,ID_TYPE], ;
               licenses.issuer WITH idarray[i,ID_ISSUER], ;
               licenses.licenseno WITH idarray[i,ID_CODE], ;
               licenses.expiration WITH idarray[i,ID_EXPIRE], ;
               licenses.animalno WITH m.animalno, ;
               licenses.licenseid WITH idarray[i,ID_IDX]
            = lastupdt()
         ENDIF
      ENDFOR
   ENDIF

   IF m.groupno != cctxtnew
      SELECT groupies

      LOCATE FOR groupies.animalno == m.animalno AND groupies.groupno == m.groupno

      IF !FOUND()
         =newrec()
         REPLACE groupies.animalno WITH m.animalno, groupies.groupno WITH m.groupno
         = lastupdt()
      ENDIF

   ENDIF

   *** Save any relationships that should be inherited from records that the current animal
   *** is copied from--- this is a side effect of the Multiple screen.
   IF wasnew AND ALEN(ownerlist, 1) > 1
      SELECT ownershp
      SET ORDER TO personno
      FOR i = 2 TO ALEN(ownerlist, 1)
         LOCATE FOR ownershp.personno == ownerlist[i, OWNER_CODE] AND ownershp.animalno == m.animalno
         IF !FOUND()
            =newrec()
            REPLACE ownershp.personno WITH ownerlist[i, OWNER_CODE], ownershp.relationship WITH ;
               ownerlist[i, OWNER_RELATION], ownershp.animalno WITH m.animalno, ownershp.startdate ;
               WITH m.founddate, ownershp.primary WITH .T., ownershp.topresent WITH .T.
            = lastupdt()
         ENDIF
      ENDFOR
   ENDIF

   *** If surrendered we want to change any 'Current Owners' to 'Previous Owners'
   IF INLIST(m.status, "Surrender", "Return") AND NOT INLIST(animal.kennel, "(Disposition)", cctxtunspec)
      SELECT ownershp
      SET ORDER TO animalno
      SEEK m.animalno
      SCAN  WHILE m.animalno = ownershp.animalno
         IF ownershp.relationsh = "Current Owner"
            REPLACE ownershp.relationsh WITH "Previous Owner"
            = lastupdt()
         ENDIF
      ENDSCAN
   ENDIF

   IF m.searched
      = arrayg(@animalfields, @animalsearched)
      = storeidarr("searched")
   ELSE
      = arrayg(@animalfields, @animalstart)
      = storeidarr("start")
   ENDIF

   IF wasnew
      WAIT WINDOW "Saved record: animal code #"+m.animalno+" assigned." NOWAIT
   ENDIF

   wasnew = .F.
   RETURN .T.

*----------------------------------------------------------------------------------------------*
   * Create animal entry record. Saves having to change the code in 3 places.
PROCEDURE savenew
   PARAMETER pcadmitverb

   IF ALLTRIM(m.kennel) = cctxtunspec
      m.didhistory = .T.
      RETURN .T.
   ENDIF

   *** Check and see if this animal has already been received.
   *** If so do not create another history record.
   SELECT * ;
      FROM HISTORY ;
      WHERE animalno = m.animalno ;
      AND category = "Shelter Entry" ;
      AND VERB = pcadmitverb ;
      INTO CURSOR qtemp
   IF _TALLY > 0
      * If any of the entry records are the same as today then
      * assume this is a duplicate.  We do it this way since Date
      * is not an indexed field.
      SCAN
         IF qtemp.date = DATE() AND qtemp.actiondt = m.founddate
            m.didhistory = .T.
         ENDIF
      ENDSCAN
   ENDIF
   IF USED("qTemp")
      USE
   ENDIF

   IF !m.didhistory
      = HISTORY("Category: Shelter Entry", ;
         "Animal: "+m.animalno, ;
         "Verb: " + pcadmitverb, ;
         "Noun: " + IIF(m.entrypoint = "Field", "Field", "Shelter"), ;
         "Specific: " + ALLTRIM(m.status), ;
         "Finish: " + ALLTRIM(m.kennel)+","+ALLTRIM(STR(m.kennelno, 3)), ;
         "Processor: " + gcuserid, ;
         "Timestamp: " + DTOC(DATE()) + " " + showtime(gettime(TIME())), ;
         "Actiondt: " + DTOC(m.founddate), ;
         "Notes: " + IIF(m.status = "Surrender", "Surrender Reason: " + m.surrender, ""), ;
         "haveLock", ;
         "Store")

		PRIVATE strHistoryNo
		StrHistoryNo = history.historyno

		=AddHistEntry( "Status", "Incoming Status For", "m.status", strHistoryNo )
		=AddHistEntry( "Altered", "Altered Status For", "m.altered", strHistoryNo )
		=AddHistEntry( "Jurisdiction", "Jurisdiction For", "m.jurisdict", strHistoryNo )
		

	  * This should only add a exit record when the animal is dispositioned
      *** at the same time that it is received.
      IF ALLTRIM(m.kennel) = "(Disposition)"
         = HISTORY("Category: Shelter Exit", ;
            "Animal: "+m.animalno, ;
            "Verb: " + m.dispositio, ;
            "Specific: " + m.statusgrou, ;
            "Finish: " + ALLTRIM(m.kennel)+","+ALLTRIM(STR(m.kennelno, 3)), ;
            "Processor: " + gcuserid, ;
            "Timestamp: " + DTOC(DATE()) + " " + showtime(gettime(TIME())), ;
            "haveLock", ;
            "Store")
      ENDIF

      IF goodcode(m.whichperson, "P") AND m.relationship # "Finder"
         lcpersonno = m.whichperson
      ELSE
         lcpersonno = SPACE(11)
      ENDIF
      lnfee = 0
      lcaccount = ""
      lcfeetblref = ""
      IF m.status = "Surrender"
         = getfee("SurnFees", "Surrender", m.animalno, @lnfee, @lcaccount, "", "", @lcfeetblref)
         = newfee(lcpersonno, m.animalno, "", pcadmitverb, IIF(m.entrypoint = "Field", "Field", "Shelter"), ;
            ALLTRIM(m.status), lnfee, 1, "", lcaccount, "", lcfeetblref)
      ENDIF

      *** If there is an existing Medical record we need to mark it inactive.
      SELECT medical
      SET ORDER TO animalno
      IF SEEK(m.animalno)
         REPLACE active WITH .F.
         = lastupdt()
      ENDIF
   ENDIF

   m.didhistory = .T.
   RETURN .T.

*----------------------------------------------------------------------------------------------*
* Check to see if we need to save the current screen info.  May need updating for dealing
* with the new ID code.
* Returns .T. if we can proceed, .F. if we shouldn't.
* leave is true if this does a CLEAR READ, false if it just returns .F.
PROCEDURE dolosscheck
   PARAMETER leave
   PRIVATE screentext, reftext

   IF leave
      reftext = wintitle + " screen"
   ELSE
      reftext = "current record"
   ENDIF

   screentext = "This will lose the changes you have made on the " + reftext + "." + ;
      CHR(13) + CHR(10) + "Do you want to:" + CHR(13) + CHR(10) + ;
      "    lose the changes and " + IIF(leave, "exit,", "proceed,") + CHR(13) + CHR(10) + ;
      "    save the changes and " + IIF(leave, "exit, or", "proceed, or") + CHR(13) + CHR(10) + ;
      "    cancel and return to the " + reftext + "?"

   IF m.searched
      whicharray = "animalSearched"
   ELSE
      whicharray = "animalStart"
   ENDIF

   IF arraycomp(@animalfields, @&whicharray)
      IF leave
         IF m.searched
            = loadanimal(.T.)
            m.searched = .F.
            = runansearch()
            RETURN .T.
         ELSE
            CLEAR READ
            RETURN .T.
         ENDIF
      ELSE
         RETURN .T.

      ENDIF
   ELSE

      i = "Cancel"
      DO lose.spr WITH screentext, i
      DO CASE
      CASE i == "Save"
         = saveanimal()
         IF leave
            IF m.searched
               = loadanimal(.T.)
               m.searched = .F.
               = runansearch()
               RETURN .T.
            ELSE
               CLEAR READ
               RETURN .T.
            ENDIF

         ENDIF
         RETURN .T.
      CASE i == "Lose"
         IF leave
            IF m.searched
               = loadanimal(.T.)
               m.searched = .F.
               = runansearch()
               RETURN .T.
            ELSE
               CLEAR READ
               RETURN .T.
            ENDIF

         ENDIF
         RETURN .T.
      CASE i == "Cancel"
         RETURN .F.
      ENDCASE

   ENDIF
   RETURN .T.


*----------------------------------------------------------------------------------------------*
* Handle printing out the receipt.                                                             *
*----------------------------------------------------------------------------------------------*
PROCEDURE dumpreceipt
   PARAMETERS plprintsel, pncopies

   PRIVATE lldumpgroup

   SELECT groupies
   SET ORDER TO animalno
   IF SEEK(m.animalno)
      lcgroupno = groupies.groupno
      lldumpgroup = msgbox("This animal is part of a group."+CHR(10)+;
         "Would you like to print Receipts for all animals in the group?", ;
         "Warning",260)=6
   ELSE
      lldumpgroup = .F.
   ENDIF

   IF goodcode(m.whichperson, "P")
      SELECT ownershp
      SET ORDER TO ownerpet
      SEEK m.whichperson + m.animalno
      IF FOUND()
         SELECT person
         SET ORDER TO personno
         SEEK m.whichperson
      ELSE
         SELECT person
         SET ORDER TO personno
         SEEK cctxtnew
      ENDIF
   ELSE
      SELECT person
      SET ORDER TO personno
      SEEK cctxtnew
   ENDIF

   IF lldumpgroup
      IF msgbox("Would you like to print the group of animals on one receipt?", "",260)=6
         lcwhichrpt = "MltaRcpt"
      ELSE
         lcwhichrpt = "AnmlRcpt"
      ENDIF
      SELECT groupies
      SET ORDER TO
      SET RELATION TO groupies.animalno INTO animal
      IF plprintsel
         = printrpt(lcwhichrpt, "Animal Receipts", "ALL FOR Groupies.GroupNo == lcGroupNo")
      ELSE
         = printdef(admin.incrcptprn, pncopies, lcwhichrpt, " ALL FOR Groupies.GroupNo == lcGroupNo ")
      ENDIF
   ELSE
      SELECT animal
      SEEK m.animalno
      IF plprintsel
         = printrpt("AnmlRcpt", "Incoming Animal Receipt", "NEXT 1")
      ELSE
         = printdef(admin.incrcptprn, pncopies, "AnmlRcpt", " NEXT 1 ")
      ENDIF
   ENDIF
   RETURN .T.

*----------------------------------------------------------------------------------------------*
* Check to see if fee processing is needed, and call the fee screen if necessary.
PROCEDURE checkfees

   PRIVATE needsfees, goodgroup, histrec, recordnum, oldcode, prevwasnew

   = saveanimal()
   m.didhistory = .T.
   m.needsfees = .T.
   DO feercpt.spr WITH m.whichperson, m.animalno, "Animal", m.paymentcode

   RETURN .T.

*----------------------------------------------------------------------------------------------*
   * Writes fee records for dead animals.
PROCEDURE deathextras

   *** Get fees for Euthanasias.
   IF goodcode(m.whichperson, "P")
      lcpersonno = m.whichperson
   ELSE
      lcpersonno = SPACE(11)
   ENDIF
   lnfee = 0
   lcaccount = ""
   lcfeetblref = ""
   IF INLIST(STATUS, "Euthanasia/Cremation: Communal", "Euthanasia/Cremation: Private", "Euthanasia Request")
      = getfee("EuthFees", "Euthanasia", m.animalno, @lnfee, @lcaccount, "", "", @lcfeetblref)
      = newfee(lcpersonno, m.animalno, "", "Euthanasia", "", "", lnfee, 1, "", lcaccount, "", lcfeetblref)
   ENDIF

   *** Get fees for Cremations.
   lnfee = 0
   lcaccount = ""
   lcfeetblref = ""
   DO CASE
   CASE INLIST(STATUS, "Euthanasia/Cremation: Communal", "Cremation: Communal")
      = getfee("CremFees", "Communal", m.animalno, @lnfee, @lcaccount, "", "", @lcfeetblref)
      = newfee(lcpersonno, m.animalno, "", "Cremation", "", "(Communal)", lnfee, 1, "", lcaccount, "", lcfeetblref)
   CASE INLIST(STATUS, "Euthanasia/Cremation: Private", "Cremation: Private")
      = getfee("CremFees", "Private", m.animalno, @lnfee, @lcaccount, "", "", @lcfeetblref)
      = newfee(lcpersonno, m.animalno, "", "Cremation", "", "(Private)", lnfee, 1, "", lcaccount, "", lcfeetblref)
   ENDCASE

   RETURN .T.

*----------------------------------------------------------------------------------------------*
   && Check if the dangerous-animal status is different.
FUNCTION checkevil

   m.evil = INLIST(m.status, "Dangerous", "Quarantine") OR ALLTRIM(m.surrender) == "Feral" OR m.dangerous
   IF m.evil
      = updateicons()
   ELSE
      IF m.animalno = cctxtnew
         = updateicons()
      ENDIF
   ENDIF
   RETURN .T.

*-------------------------------------------------------------------------------------------------*
PROCEDURE makeadoptable

   IF m.adoptable
      lcuserid = gcuserid
      IF !chkauth(lcuserid, "adoption")
         passedtest = .F.
         DO security WITH .T., "adoption", passedtest, lcapprover
         m.adoptable = passedtest
      ELSE
         lcapprover = lcuserid
      ENDIF
      *** Check to make sure there are no holds on the animal.
      IF m.adoptable AND holdstat(m.animalno) = "Supervisor Hold"
         = alert("Animal cannot be approved for adoption because there is a Supervisor Hold on this animal.")
         m.adoptable = .F.
      ENDIF
   ENDIF
   SHOW GET m.adoptable
   RETURN .T.

*----------------------------------------------------------------------------------------------*
   * Update any icons on the screen.
FUNCTION updateicons
   SHOW GET m.collartyp1
   SHOW GET m.collarclr1
   SHOW GET m.evil
   SHOW GETS OFF
   RETURN .T.

*----------------------------------------------------------------------------------------------*
   * Clears screen with fresh empty one.
PROCEDURE clearscreen

   m.evil = .F.
   m.agetext = ""
   m.weightext = ""
   m.fndtimetext = ""
   m.verbtext = ""		&& Lost/Found/...
   m.personpick = 1
   m.behaviortext = ""

   statuslist[1,1] = cctxtunspec
   breedlist[1,1] = cctxtunspec
   breed2list[1,1] = cctxtunspec
   clrprmlist[1,1] = cctxtunspec
   clrscdlist[1,1] = cctxtunspec
   clrpatlist[1,1] = cctxtunspec
   coatlist[1,1] = cctxtunspec
   taillist[1,1] = cctxtunspec
   eyelist[1,1] = cctxtunspec
   earlist[1,1] = cctxtunspec
   coltyplist[1,1] = cctxtunspec

   DIMENSION ownerlist[1,OWNERWIDTH]
   ownerlist[1,OWNER_TXT] = "  [Add New Person]"
   ownerlist[1,OWNER_CODE] = "New"
   ownerlist[1,OWNER_RELATION] = "Finder"

   m.animalno = cctxtnew
   SELECT animal
   SEEK cctxtnew
   SCATTER MEMO MEMVAR

   && Keeping ID arrays to match the other ones.
   DIMENSION idarray[1,1]
   = idsetup(cctxtnew, @idarray)
   = ACOPY(idarray, idstart)
   = ACOPY(idarray, idarr)
   = ACOPY(idarray, idsearched)

   m.oldnum = cctxtnew
   m.founddate = DATE()
   m.foundtime =gettime(TIME())
   m.fndtimetext = showtime(m.foundtime)
   animalnum = m.animalno

   DO CASE
   CASE wintitle == "Animal Receiving"
      _CUROBJ = OBJNUM(m.statusgrou)
   CASE wintitle == "Animal Information"
      _CUROBJ = OBJNUM(m.animalno)
   CASE wintitle == "Lost and Found"
      _CUROBJ = OBJNUM(m.statusgrou)
      m.statusgrou = "Lost"
   ENDCASE

   m.printreceipt = .F.				&& We are to print a receipt at Done
   m.printkennel = .F.				&& We are to print a kennel card at Done
   m.didhistory = .F.				&& Special history events are already entered
   m.wasnew = .F.					&& This is a new record
   m.disposed = .F.					&& Animal has been brought in again
   m.searched = .F.				&& We are at search result level (affects Cancel operation)
   m.paymentcode = cctxtunspec	&& Code of any payment that needs printing
   m.oldnum = cctxtunspec		&& Animal number to revert to
   relationship = "Finder"			&& Default relationship to new person
   groupno = cctxtnew			&& Group animal belongs to--- set from Multiple
   m.issuedpermit = .F.				&& Changed when permit code leaves history records. Yes, as code goes, it's a horrible way to do things.
   m.curkennelmax = m.kennelmax
   m.whichperson = m.personno	&& Selects a person as default from the list.
   lcapprover = gcuserid			&& Used for adoption approval.
   llmultcollar = .F.
   = disableanimal()

   DIMENSION animalarr[1], animalstart[1], animalsearched[1]
   = arrayg(@animalfields, @animalstart)
   = storeidarr("start")

   SHOW GETS

*----------------------------------------------------------------------------------------------*
* Jump to the Person screen, based on the selection in the ownerList list.                     *
*----------------------------------------------------------------------------------------------*
PROCEDURE goperson
   PARAMETER isbutton	&& Is "New Person..." button
   PRIVATE check

   whichperson = ownerlist[m.personPick, OWNER_CODE]
   lcrelation = ownerlist[m.personPick, OWNER_RELATION]

   IF ALLTRIM(m.animalno) == cctxtnew AND ALEN(ownerlist, 1) > 1
      && Save all relationships.
      = saveanimal()
   ENDIF
   check = m.animalno

   IF admin.longform
      gcnextevent = "Person"
      gcparameters = "'" + m.animalno + "', '" + whichperson + "', '" + lcrelation + "', .F."
   ELSE
      gcnextevent = "person2"
      gcparameters = "'" + m.animalno + "', '" + whichperson + "', '" + lcrelation + "', .F."
   ENDIF
   DO WHILE NOT EMPTY(gcnextevent)
      lcnextevent = gcnextevent
      lcparameters = gcparameters
      gcnextevent = ""
      gcparameters = ""
      DO (lcnextevent + ".SPR ") WITH &lcparametewrs
   ENDDO

   m.animalno = gcanimalno
   m.whichperson = gcpersonno

   IF check # m.animalno
      SELECT animal
      IF SEEK(m.animalno)
         _CUROBJ = OBJNUM(m.animalno)
         KEYBOARD '{ENTER}'
      ENDIF
   ENDIF

   = setpersonlist()
   SHOW GET m.animalno

   IF goodcode(m.whichperson, "P")
      m.personno = m.whichperson
   ENDIF
   RETURN .T.

PROCEDURE setpersonlist
   PRIVATE knowwhich, people

   IF !goodcode(m.animalno, "A")
      DIMENSION ownerslist[1,OWNERWIDTH]
      SHOW GET m.button, feesbutton DISABLE	&& No receipt
      RETURN .T.
   ELSE
      SHOW GET m.button, feesbutton ENABLE
   ENDIF

   SELECT ownershp
   SET ORDER TO animalno
   = SEEK( m.animalno )
   COUNT WHILE ownershp.animalno==m.animalno ;
      FOR !EMPTY(ownershp.personno ) ;
      AND NOT DELETED() ;
      TO numowners

   IF numowners = 0
      DIMENSION ownerslist[1,OWNERWIDTH]
   ELSE
      GOTO TOP	&& Just in case the record pointer is screwed up

      SELECT (ALLTRIM(ownershp.relationsh) + ": " + ALLTRIM(person.firstname) + " " + ;
         ALLTRIM(person.lastname)), person.personno, ownershp.relationsh ;
         WHERE person.personno = ownershp.personno AND ownershp.animalno = m.animalno ;
         FROM ownershp, person ;
         INTO ARRAY people

      DIMENSION ownerlist[ALEN(people,1)+1, OWNERWIDTH]
      personfound = .F.
      knowwhich = goodcode(m.whichperson, "P")

      FOR i = 1 TO ALEN(people, 1)
         ownerlist[i+1, OWNER_TXT] = "  " + people[i,1]
         ownerlist[i+1, OWNER_CODE] = ALLTRIM(people[i,2])
         ownerlist[i+1, OWNER_RELATION] = ALLTRIM(people[i,3])

         && If personNo is set, bullet that person. Otherwise, take the current owner. If none,
         && take the first person available.
         IF !personfound
            IF knowwhich
               IF ownerlist[i+1, OWNER_CODE] == m.whichperson
                  ownerlist[i+1, OWNER_TXT] = bulletchar + " " + people[i,1]
                  personfound = .T.
               ENDIF
            ELSE
               IF ownerlist[i+1, OWNER_RELATION] == "Current Owner"
                  ownerlist[i+1, OWNER_TXT] = bulletchar + " " + people[i,1]
                  m.whichperson = ownerlist[i+1, OWNER_CODE]
                  personfound = .T.
               ENDIF
            ENDIF
         ENDIF
      ENDFOR
      IF !personfound
         ownerlist[2, OWNER_TXT] = bulletchar + RIGHT(ownerlist[2,OWNER_TXT], LEN(ownerlist[2,OWNER_TXT])-1)
         m.whichperson = ownerlist[2, OWNER_CODE]
      ENDIF

      RELEASE people
      SHOW GET m.button, feesbutton ENABLE

   ENDIF	&& numowners = 0
   SHOW GET m.personpick
   RETURN .T.

FUNC rcheck
   IF RDLEVEL() >= 3
      SHOW GET button3,1 DISABLE
      =msgbox("Sorry, You need to access this from a previous screen","Ooops",64)
      RETURN .F.
   ENDIF
   RETURN .T.

func wcheck

if wvisible("Adoption") or ;
	wvisible("Redeem") or;
	wvisible("Complain") or;
	wvisible("Bite") or;
	rdlevel() >= 4
	show get button3,1 disabled
endif
return .t.

*       *********************************************************
*       *                                                         
*       * _1200I5A54           m.foundDate VALID                  
*       *                                                         
*       * Function Origin:                                        
*       *                                                         
*       * From Platform:       Windows                            
*       * From Screen:         ANIMAL,     Record Number:   44    
*       * Variable:            m.foundDate                        
*       * Called By:           VALID Clause                       
*       * Object Type:         Field                              
*       * Snippet Number:      1                                  
*       *                                                         
*       *********************************************************
*
FUNCTION _1200i5a54     &&  m.foundDate VALID
#REGION 1
IF UPDATED() AND TYPE("M.Founddate")="D"
   *m.available=m.founddate needs to be adjusted
   DO CASE
   CASE m.species="Cat" AND hadid
      m.available=dadd(m.founddate,catid)
   CASE m.species="Dog" AND hadid
      m.available=dadd(m.founddate,dogid)
   CASE m.species="Cat"
      m.available=dadd(m.founddate,catnid)
   CASE m.species="Dog"
      m.available=dadd(m.founddate,dognid)
   CASE hadid
      m.available=dadd(m.founddate,othid)
   OTHERWISE
      m.available=dadd(m.founddate,othnid)
   ENDCASE
   SHOW GET m.available
ENDIF
RETURN pfounddt("Valid")


FUNC dadd
   PARAM d1, ivalue
   PRIV ALL
   sd=INT(VAL(wordnum(ivalue,1)))
   IF sd > 0
      sw=INT(VAL(wordnum(ivalue,2)))
      sm=INT(VAL(wordnum(ivalue,3)))
      sy=INT(VAL(wordnum(ivalue,4)))
      rval = age(d1, sd, sw, sm, sy)
   ELSE
      rval = {}
   ENDIF
   RETURN rval



*       *********************************************************
*       *                                                         
*       * _1200I5A5D           m.AnimalName VALID                 
*       *                                                         
*       * Function Origin:                                        
*       *                                                         
*       * From Platform:       Windows                            
*       * From Screen:         ANIMAL,     Record Number:   54    
*       * Variable:            m.AnimalName                       
*       * Called By:           VALID Clause                       
*       * Object Type:         Field                              
*       * Snippet Number:      2                                  
*       *                                                         
*       *********************************************************
*
FUNCTION _1200i5a5d     &&  m.AnimalName VALID
#REGION 1
m.animalname=ALLTRIM(m.animalname)
m.animalname=STUFF(SPACE(FSIZE("AnimalName","Animal")),;
   1, LEN(m.animalname),m.animalname)
SHOW GET m.animalname
RETURN panimalname("Valid")


*       *********************************************************
*       *                                                         
*       * _1200I5A5F           m.Breed1 VALID                     
*       *                                                         
*       * Function Origin:                                        
*       *                                                         
*       * From Platform:       Windows                            
*       * From Screen:         ANIMAL,     Record Number:   56    
*       * Variable:            m.Breed1                           
*       * Called By:           VALID Clause                       
*       * Object Type:         Popup                              
*       * Snippet Number:      3                                  
*       *                                                         
*       *********************************************************
*
* This will default the size field from the breed table.
FUNCTION _1200i5a5f     &&  m.Breed1 VALID
#REGION 1
lnsub = ASUBSCRIPT(breedlist, ASCAN(breedlist, m.breed1), 1)
IF m.species # "Wild" AND !EMPTY(breedlist(lnsub, 2))
   m.weightgrp = breedlist(lnsub,2)
   SHOW GET m.weightgrp
ENDIF


*       *********************************************************
*       *                                                         
*       * _1200I5A5S           m.button WHEN                      
*       *                                                         
*       * Function Origin:                                        
*       *                                                         
*       * From Platform:       Windows                            
*       * From Screen:         ANIMAL,     Record Number:   86    
*       * Variable:            m.button                           
*       * Called By:           WHEN Clause                        
*       * Object Type:         Push Button                        
*       * Snippet Number:      4                                  
*       *                                                         
*       *********************************************************
*
FUNCTION _1200i5a5s     &&  m.button WHEN
#REGION 1
if wexist("adopsrch")
  show get m.button, 5 disable
endif

*       *********************************************************
*       *                                                         
*       * _1200I5A5Y           m.AnimalNo VALID                   
*       *                                                         
*       * Function Origin:                                        
*       *                                                         
*       * From Platform:       Windows                            
*       * From Screen:         ANIMAL,     Record Number:   92    
*       * Variable:            m.AnimalNo                         
*       * Called By:           VALID Clause                       
*       * Object Type:         Field                              
*       * Snippet Number:      5                                  
*       *                                                         
*       *********************************************************
*
FUNCTION _1200i5a5y     &&  m.AnimalNo VALID
#REGION 1
PRIV rval

DO CASE
CASE pAnimalNo("Valid")
   RETURN .T.
CASE gllaptop
   RETURN pAnimalNo("Valid",.t.)
OTHERWISE
   RETURN .F.
ENDCASE



*       *********************************************************
*       *                                                         
*       * _1200I5A64           Read Level When                    
*       *                                                         
*       * Function Origin:                                        
*       *                                                         
*       *                                                         
*       * From Platform:       Windows                            
*       * From Screen:         ANIMAL                             
*       * Called By:           READ Statement                     
*       * Snippet Number:      6                                  
*       *                                                         
*       *********************************************************
*
FUNCTION _1200i5a64     && Read Level When
*
* When Code from screen: ANIMAL
*
#REGION 1
&& In case the WHEN code gets evaluated a second time. I'm not sure
&& I saw the bloody thing do this, but a mistake could really screw
&& things up...

=wcheck()
if wexist("AdopSrch")
 show get m.button, 5 disable
endif
IF once
   once = .F.
   PUSH KEY
   ON KEY LABEL ctrl-R _CUROBJ=OBJNUM(personpick)
   ON KEY LABEL ctrl-F _CUROBJ=OBJNUM(markings)
   ON KEY LABEL ctrl-N _CUROBJ=OBJNUM(notes)
   = loadanimal(.F.)

   IF ALLTRIM(m.animalno) == cctxtnew
      m.oldnum = cctxtnew
      m.founddate = DATE()
      m.foundtime =gettime(TIME())
      m.fndtimetext = showtime(m.foundtime)
      IF wintitle == "Lost and Found"
         m.statusgrou = "Lost"
      ENDIF
      = arrayg(@animalfields, @animalstart)
      = storeidarr("start")
   ENDIF

   DO CASE
   CASE wintitle == "Animal Receiving"
   CASE wintitle == "Animal Information"
      _CUROBJ = OBJNUM(m.animalno)
   CASE wintitle == "Lost and Found"
      SHOW GET m.status DISABLE
      SHOW GET m.surrender DISABLE
      SHOW GET m.entrypoint DISABLE
      SHOW GET m.kennel DISABLE
      SHOW GET m.kennelno DISABLE
      SHOW GET m.available DISABLE
   ENDCASE

   kennelidx = subscan(@kennellist, kennel, 1)
   IF kennelidx > 0
      IF kennellist[kennelIdx, KNL_NUMBERED]
         m.curkennelmax = kennellist[kennelIdx, KNL_MAX]
         SHOW GET m.kennelno ENABLE
      ENDIF
   ELSE
      m.curkennelmax = 1
   ENDIF
   showjuris = .T.
   IF showjuris
      SHOW GET m.jurisdict ENABLE
   ENDIF

   SHOW GETS OFF

   IF TYPE("XInBite")="L" AND xinbite
      SHOW GET m.button3,1 DISABLE
   ENDIF
ENDIF
RETURN .T.



*       *********************************************************
*       *                                                         
*       * _1200I5A65           Read Level Show                    
*       *                                                         
*       * Function Origin:                                        
*       *                                                         
*       *                                                         
*       * From Platform:       Windows                            
*       * From Screen:         ANIMAL                             
*       * Called By:           READ Statement                     
*       * Snippet Number:      7                                  
*       *                                                         
*       *********************************************************
*
FUNCTION _1200i5a65     && Read Level Show
PRIVATE currwind
STORE WOUTPUT() TO currwind
*
* Show Code from screen: ANIMAL
*
#REGION 1
IF SYS(2016) = "ANIMAL" OR SYS(2016) = "*"
	ACTIVATE WINDOW animal SAME
@ 19.188,74.167 SAY iif(m.evil, iif(hadid,ScrnBmps.talontag3,ScrnBmps.talons3), iif(hadid, ScrnBmps.tag3, ScrnBmps.null)) ;
	SIZE 3.688,11.333 ;
	CENTER ;
	ISOMETRIC ;
	STYLE ""
	@ 0.250,13.500 SAY gcUserId ;
		SIZE 0.875,20.000, 0.000 ;
		FONT "Arial", 10
	@ 0.188,40.333 SAY DATE() ;
		SIZE 0.875,11.167, 0.000 ;
		FONT "Arial", 10
	@ 0.188,59.000 SAY TIME() ;
		SIZE 0.875,9.500, 0.000 ;
		FONT "Arial", 10
	@ 9.125,1.500 CLEAR TO 10.125,14.000
	@ 9.125,1.500 SAY m.verbText ;
		SIZE 1.000,12.500, 0.000 ;
		FONT "Arial", 10 ;
		STYLE "BT"
	@ 1.313,33.333 CLEAR TO 2.313,73.333
	@ 1.313,33.333 SAY holdStat(m.AnimalNo) ;
		SIZE 1.000,40.000, 0.000 ;
		FONT "Arial", 10 ;
		STYLE "BT" ;
		COLOR RGB(255,0,0,,,,)
	@ 1.313,13.500 SAY iif(deleted("animal"),"* DELETED *","") ;
		SIZE 1.000,18.333, 0.000 ;
		FONT "Arial", 10 ;
		STYLE "B" ;
		COLOR RGB(255,0,0,,,,)
ENDIF
IF NOT EMPTY(currwind)
	ACTIVATE WINDOW (currwind) SAME
ENDIF